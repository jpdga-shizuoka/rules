#!/usr/bin/env node

const Path = require('path');

const PREFACES_LIST = [
  'preface',
];
const RULES_LIST = [
  'index',
  '800',
  '801',
  '80101',
  '80102',
  '80103',
  '802',
  '80201',
  '80202',
  '80203',
  '80204',
  '80205',
  '80206',
  '80207',
  '803',
  '80301',
  '80302',
  '80303',
  '804',
  '80401',
  '805',
  '80501',
  '80502',
  '80503',
  '806',
  '80601',
  '80602',
  '80603',
  '80604',
  '80605',
  '807',
  '808',
  '809',
  '80901',
  '80902',
  '80903',
  '810',
  '811',
  '812',
  '813',
  '81301',
  '81302',
];
const APPENDIX_LIST = [
  'appendix-a',
  'appendix-b',
  'appendix-c',
  'appendix-d',
  'appendix-e',
  'appendix-f',
];
const QAS_LIST = [
  'index',
  'app',
  'thr',
  'tee',
  'lie',
  'mar',
  'sta',
  'obs',
  'man',
  'pos',
  '2m',
  'los',
  'put',
  'ob',
  'cas',
  'haz',
  'com',
  'sco',
  'aba',
  'pro',
  'pra',
  'int',
  'mis',
  'cou',
  'equ',
  'mat',
  'dou',
  'cmp',
];
const MISC_LIST = [
  'penalties',
  'enforcement',
  'obstacles',
  'reliefs',
  'obhazardinbounds',
  'mandatory',
  'relief-from-ob',
  'postface'
];
const external = /^http/i;
const PREFACE_SRC = 'prefaces';
const RULE_SRC = 'rules';
const APPENDIX_SRC = 'appendix';
const QA_SRC = 'qas';
const MISC_SRC = 'miscs';
const DST = './src/app/'
const TOC = './src/assets/toc/';
const header = /^\#+ ([\d\.]+ \S+)/m;
const fs = require('fs');
const md = require('markdown-it')({
  html:         true,
  replaceLink: replaceLink,
})
.use(require('markdown-it-footnote'))
.use(require('markdown-it-ins'))
.use(require('markdown-it-container'), 'app-table')
.use(require('markdown-it-span'))
.use(replaceLinkPlugIn);
let toc = [];
md.renderer.rules.footnote_ref = render_footnote_ref;

createComponents(PREFACES_LIST, PREFACE_SRC);
createComponents(RULES_LIST, RULE_SRC);
createComponents(APPENDIX_LIST, APPENDIX_SRC);
createComponents(QAS_LIST, QA_SRC);
createComponents(MISC_LIST, MISC_SRC);

//////////////////////////////////////////////////////////////////////
// end of program
//////////////////////////////////////////////////////////////////////

function createComponents(sources, srcPath) {
  sources.forEach(id => {
    const filepath = Path.join(srcPath, id + '.md');
    const mdContent = fs.readFileSync(filepath, 'utf8');
    const emailRegex = /([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g;
    const htmlContent = md.render(mdContent)
        .replace(emailRegex,  // メールアドレス中の'@'を'&#64;'に置き換え
            (match, localPart, domainPart) => `${localPart}&#64;${domainPart}`);

    makeToc(srcPath === 'qas' ? 'qa-' + id : id, mdContent);
    makeHtml(id, htmlContent, srcPath);
    makeComponent(id, srcPath);
  });
  fs.writeFileSync(Path.join(TOC, srcPath + '.json'), JSON.stringify(toc, null, '  '), {flag:'w'});
  toc = [];
}

function makeToc(id, content) {
  const title = content.match(header)
    || content.match(/^\#\# \[(\S+)\]\([0-9]+\)$/m)
    || content.match(/^\#\# \[(\S+)\]\(appendix-[a-z]\)$/m)
    || content.match(/^\# (附則[A-Z] \S+)$/m)
    || content.match(/^\#+ (\S+)$/m)
    || content.match(/^\#+ (\S+\s+\S+)$/m);
  if (title == null) {
    console.log('title not found: ' + id);
    return;
  }
  toc.push({
    id: id,
    title: title[1]
  });
}

function makeHtml(id, html, srcPath) {
  const name = removeLastS(srcPath);
  const dstPath = Path.join(DST, srcPath, id + '.html');
  let content =`<div class="app-${name}" id="app-${id}">`;
  if (isRule(id) || isQa(id)) {
    content +='<app-pull-to-jump></app-pull-to-jump>';
  }
  content += `
${html}</div>`;
  fs.writeFileSync(dstPath, content);
}

function makeComponent(id, srcPath) {
  const name = removeLastS(srcPath);
  const Name = capitalizeFirstLetter(name);
  const sid = makeId(id);
  const dstPath = Path.join(DST, srcPath, name + id + '.component.ts');
  const content =`import { Component } from '@angular/core';
import { ${Name}Component } from './${name}.component';
@Component({
  selector: 'app-${name}-${id}',
  templateUrl: './${id}.html'
})
export class ${Name}${sid}Component extends ${Name}Component {
  get ruleId(): string { return '${id}'; }
}
`;
  fs.writeFileSync(dstPath, content);
}

//
// @ see https://github.com/martinheidegger/markdown-it-replace-link
//
function replaceLinkPlugIn(md) {
  md.core.ruler.after(
    'inline',
    'replace-link',
    state => {
      const replace = md.options.replaceLink;
      if (typeof replace === 'function') {
        state.tokens.forEach(blockToken => {
          if (blockToken.type === 'inline' && blockToken.children) {
            blockToken.children.forEach(token => {
              const type = token.type;
              if (type === 'link_open') {
                replaceAttr(token, 'href', replace, state.env);
              }
            });
          }
        });
      }
      return false;
    }
  );
};

function replaceAttr(token, attrName, replace, env) {
  token.attrs.forEach(attr => {
    if (!external.test(attr[1])) {  //外部参照でない場合は、内部参照として
      attr[0] = 'routerLink';       // href を routerLink に置き換える
      attr[1] = replace(attr[1], env, token);
    }
  });
}

function replaceLink(link, env) {
  result = link.match(/^\/?ordg\/(\w*)/);
  if (result != null) {
    return '/' + result[1];
  }
  result = link.match(/(\w*)+\#(\w+)/);
  if (result != null) {
    console.log(result[1])
    return '/' + result[1];
  }
  return '/' + link;
}

//
//  @see https://github.com/markdown-it/markdown-it-footnote/blob/master/index.js
//
function render_footnote_ref(tokens, idx, options, env, slf) {
  const id      = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);
  const caption = slf.rules.footnote_caption(tokens, idx, options, env, slf);
  let refid = id;
  if (tokens[idx].meta.subId > 0) {
    refid += ':' + tokens[idx].meta.subId;
  }

  return '<sup class="footnote-ref"><a routerLink="." fragment="fn' + id + '" id="fnref' + refid + '">' + caption + '</a></sup>';
}

function removeLastS(string) {
  const c = string.charAt(string.length - 1);
  return c === 's' ? string.slice(0, -1) : string;
}

function makeId(string) {
  const id = string.replace(/\-/g, '');
  return capitalizeFirstLetter(id);
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function isRule(id) {
  return /[0-9]+/.test(id);
}

function isQa(id) {
  const LIST = [
    'app','thr','tim','tee','lie','mar','sta','obs','man','pos','2m','los',
    'put','ob','cas','com','sco','aba','pro','pra','int','mis','cou','equ',
    'mat', 'dou', 'cmp'
  ];
  return LIST.includes(id);
}
